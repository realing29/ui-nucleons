// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TextField /> should handle "caption" prop 1`] = `
<ForwardRef(TextField)
  caption={
    <span>
      Hello 
      <b>
        World
      </b>
      !
    </span>
  }
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop rounds-sm__all"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
    <div
      className="caption M-t__2"
    >
      <span>
        Hello 
        <b>
          World
        </b>
        !
      </span>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle "caption" prop 2`] = `
<ForwardRef(TextField)
  caption={
    <span>
      Hello 
      <b>
        World
      </b>
      !
    </span>
  }
  disabled={true}
  failed={true}
  variant="mobile"
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-mobile disabled"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            disabled={true}
            failed={true}
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input failed disabled size-l"
              disabled={true}
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
    <div
      className="caption M-t__1 disabled failed"
    >
      <span>
        Hello 
        <b>
          World
        </b>
        !
      </span>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle "disabled" prop 1`] = `
<ForwardRef(TextField)
  disabled={true}
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop disabled rounds-sm__all"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            disabled={true}
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input disabled size-l"
              disabled={true}
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle "focused" prop 1`] = `
<ForwardRef(TextField)
  focused={true}
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop focused rounds-sm__all"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle "label" prop 1`] = `
<ForwardRef(TextField)
  label="The best label in our world!"
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop with-label rounds-sm__all"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <Label
          asPlaceholder={true}
          focused={false}
          variant="desktop"
        >
          <label
            className="label as-placeholder variant-desktop"
          >
            The best label in our world!
          </label>
        </Label>
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            onBlur={[Function]}
            onFocus={[Function]}
            placeholder={null}
            size="l"
          >
            <input
              className="reset base-input size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
              placeholder={null}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle "label" prop 2`] = `
<ForwardRef(TextField)
  disabled={true}
  failed={true}
  label="The best label in our world!"
  variant="mobile"
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-mobile disabled with-label"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <Label
          asPlaceholder={true}
          disabled={true}
          failed={true}
          focused={false}
          variant="mobile"
        >
          <label
            className="label as-placeholder disabled failed variant-mobile"
          >
            The best label in our world!
          </label>
        </Label>
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            disabled={true}
            failed={true}
            onBlur={[Function]}
            onFocus={[Function]}
            placeholder={null}
            size="l"
          >
            <input
              className="reset base-input failed disabled size-l"
              disabled={true}
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
              placeholder={null}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle "multiline" prop 1`] = `
<ForwardRef(TextField)
  baseInputProps={
    Object {
      "rows": 3,
    }
  }
  multiline={true}
  onInput={[MockFunction]}
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop multiline rounds-sm__all"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            multiline={true}
            onBlur={[Function]}
            onFocus={[Function]}
            onInput={[MockFunction]}
            rows={3}
            size="l"
          >
            <textarea
              className="reset base-input multiline size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
              rows={3}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle "variant" prop 1`] = `
<ForwardRef(TextField)
  variant="desktop"
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop rounds-sm__all"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle "variant" prop 2`] = `
<ForwardRef(TextField)
  variant="mobile"
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-mobile"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle adornment props 1`] = `
<ForwardRef(TextField)
  startAdornment="Name: "
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop rounds-sm__all"
      onClick={[Function]}
    >
      <Box
        alignItems="center"
        display="flex"
        marginRight={4}
      >
        <div
          className="display-flex align-items-center M-r__4"
        >
          Name: 
        </div>
      </Box>
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should handle adornment props 2`] = `
<ForwardRef(TextField)
  endAdornment="Kg"
  startAdornment={null}
>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop rounds-sm__all"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
      <Box
        alignItems="center"
        display="flex"
        marginLeft={4}
      >
        <div
          className="display-flex align-items-center M-l__4"
        >
          Kg
        </div>
      </Box>
    </div>
  </div>
</ForwardRef(TextField)>
`;

exports[`<TextField /> should render without props 1`] = `
<ForwardRef(TextField)>
  <div
    className="text-field-root"
  >
    <div
      className="reset input-block size-l variant-desktop rounds-sm__all"
      onClick={[Function]}
    >
      <div
        className="main-column"
      >
        <div
          className="input-wrapper"
        >
          <ForwardRef(BaseInput)
            className=""
            onBlur={[Function]}
            onFocus={[Function]}
            size="l"
          >
            <input
              className="reset base-input size-l"
              onBlur={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
            />
          </ForwardRef(BaseInput)>
        </div>
      </div>
    </div>
  </div>
</ForwardRef(TextField)>
`;
