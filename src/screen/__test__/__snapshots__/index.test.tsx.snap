// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Screen /> should handle "loading/loadingOverlayProps" props 1`] = `
<Screen
  loading={true}
  loadingOverlayProps={
    {
      "spinnerProps": {
        "size": "medium",
      },
    }
  }
>
  <div
    className="root"
    data-testid="screen"
    style={
      {
        "zIndex": 300,
      }
    }
  >
    <ForwardRef(BodySlot)
      key=".0"
    >
      <div
        className="body"
        data-testid="screen:body"
      >
        <LoadingOverlay
          fill={false}
          spinnerProps={
            {
              "size": "medium",
            }
          }
          style={
            {
              "height": "100%",
            }
          }
        >
          <div
            className="loading-overlay"
            style={
              {
                "height": "100%",
              }
            }
          >
            <Spinner
              size="medium"
            >
              <div
                data-testid="spinner"
              >
                <SpinnerSVG
                  color="basic-blue"
                  data-testid={null}
                  size="medium"
                >
                  <svg
                    className="spinner size-medium"
                    data-testid={null}
                    height={48}
                    stroke="#1f84db"
                    viewBox="0 0 48 48"
                    width={48}
                  >
                    <circle
                      className="circle"
                      cx={24}
                      cy={24}
                      r={23}
                    />
                  </svg>
                </SpinnerSVG>
              </div>
            </Spinner>
          </div>
        </LoadingOverlay>
      </div>
    </ForwardRef(BodySlot)>
  </div>
</Screen>
`;

exports[`<Screen /> should handle "loadingArea" prop 1`] = `
<Screen
  loading={true}
  loadingArea="content"
>
  <div
    className="root"
    data-testid="screen"
    style={
      {
        "zIndex": 300,
      }
    }
  >
    <HeaderSlot
      divided={true}
      key=".0"
      subtitle="Subtitle"
      title="Title"
    >
      <TopBar
        buttons={
          {
            "end": undefined,
            "start": undefined,
          }
        }
        divided={true}
        size="s"
        subtitle="Subtitle"
        title="Title"
      >
        <div
          className="root size-s inner-border-bottom"
          data-testid="top-bar"
        >
          <div
            className="main"
          >
            <div
              className="title"
            >
              Title
            </div>
            <div
              className="subtitle"
            >
              Subtitle
            </div>
          </div>
        </div>
      </TopBar>
    </HeaderSlot>
    <ForwardRef(BodySlot)
      key=".1"
    >
      <div
        className="body"
        data-testid="screen:body"
      >
        <LoadingOverlay
          fill={false}
          style={
            {
              "height": "100%",
            }
          }
        >
          <div
            className="loading-overlay"
            style={
              {
                "height": "100%",
              }
            }
          >
            <Spinner>
              <div
                data-testid="spinner"
              >
                <SpinnerSVG
                  color="basic-blue"
                  data-testid={null}
                  size="m"
                >
                  <svg
                    className="spinner size-m"
                    data-testid={null}
                    height={48}
                    stroke="#1f84db"
                    viewBox="0 0 48 48"
                    width={48}
                  >
                    <circle
                      className="circle"
                      cx={24}
                      cy={24}
                      r={23}
                    />
                  </svg>
                </SpinnerSVG>
              </div>
            </Spinner>
          </div>
        </LoadingOverlay>
      </div>
    </ForwardRef(BodySlot)>
    <div
      className="footer"
      data-testid="screen:footer"
    >
      <FooterSlot
        key=".2"
      >
        <p>
          Footer content
        </p>
      </FooterSlot>
    </div>
  </div>
</Screen>
`;

exports[`<Screen /> should renders correctly 1`] = `
<Screen
  fullScrollThreshold={100}
>
  <div
    className="root"
    data-testid="screen"
    style={
      {
        "zIndex": 300,
      }
    }
  >
    <HeaderSlot
      divided={true}
      key=".0"
      subtitle="Subtitle"
      title="Title"
    >
      <TopBar
        buttons={
          {
            "end": undefined,
            "start": undefined,
          }
        }
        divided={true}
        size="s"
        subtitle="Subtitle"
        title="Title"
      >
        <div
          className="root size-s inner-border-bottom"
          data-testid="top-bar"
        >
          <div
            className="main"
          >
            <div
              className="title"
            >
              Title
            </div>
            <div
              className="subtitle"
            >
              Subtitle
            </div>
          </div>
        </div>
      </TopBar>
    </HeaderSlot>
    <ForwardRef(BodySlot)
      key=".1"
    >
      <div
        className="body"
        data-testid="screen:body"
      >
        <p>
          Body
        </p>
      </div>
    </ForwardRef(BodySlot)>
    <div
      className="footer"
      data-testid="screen:footer"
    >
      <FooterSlot
        key=".2"
      >
        <p>
          Footer
        </p>
      </FooterSlot>
    </div>
  </div>
</Screen>
`;

exports[`<Screen /> should renders without close button 1`] = `
<Screen>
  <div
    className="root"
    data-testid="screen"
    style={
      {
        "zIndex": 300,
      }
    }
  >
    <HeaderSlot
      buttons={
        {
          "end": {
            "text": "cross replacer",
          },
        }
      }
      key=".0"
    >
      <TopBar
        buttons={
          {
            "end": {
              "text": "cross replacer",
            },
            "start": undefined,
          }
        }
        size="s"
      >
        <div
          className="root size-s no-subtitle"
          data-testid="top-bar"
        >
          <div
            className="side"
          >
            <TopBarButtonGroup
              end={true}
              stub={true}
            >
              <div
                className="button-group stub end"
              >
                <TopBarButton
                  text="cross replacer"
                >
                  <button
                    aria-hidden={true}
                    className="button stub"
                    type="button"
                  >
                    cross replacer
                  </button>
                </TopBarButton>
              </div>
            </TopBarButtonGroup>
          </div>
          <div
            className="main"
          />
          <div
            className="side"
          >
            <TopBarButtonGroup
              end={true}
            >
              <div
                className="button-group end"
              >
                <TopBarButton
                  text="cross replacer"
                >
                  <button
                    className="button"
                    data-testid="top-bar:button"
                    type="button"
                  >
                    cross replacer
                  </button>
                </TopBarButton>
              </div>
            </TopBarButtonGroup>
          </div>
        </div>
      </TopBar>
    </HeaderSlot>
    <ForwardRef(BodySlot)
      key=".1"
    >
      <div
        className="body"
        data-testid="screen:body"
      />
    </ForwardRef(BodySlot)>
  </div>
</Screen>
`;
